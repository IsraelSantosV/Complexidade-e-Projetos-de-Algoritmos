# -*- coding: utf-8 -*-
"""Notebook_CPA22-1_oculto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWCqdbvqz2Ozj2qbVGUbtHq3j0s8ORry

# CPA 2022/1

## Imports
"""

import numpy as np
import time
import matplotlib.pyplot as plt
import sys
sys.setrecursionlimit(50000)

"""## Algorítmos de Ordenação

### Algoritmo Insertion Sort
"""

def insertionSort(arranjo):
  #ini= time.time()
  compara=0
  for j in range (1,len(arranjo)):
    compara = compara + 1
    chave=arranjo[j]
    i=j-1
    while i>=0 and arranjo[i]>chave:
      compara = compara + 1
      arranjo[i+1]=arranjo[i]
      i=i-1
    arranjo[i+1]=chave
  #fim = time.time()
  #tempo_exec=fim-ini
    compara = compara + 1
  return arranjo, compara

  #print('A[i..j-1] invariante de loop:', arranjo[:j])


def insertionSort_reverse(arranjo):
  ini= time.time()
  for j in range (1,len(arranjo)):
    chave=arranjo[j]
    i=j-1
    while i>=0 and arranjo[i]<chave:
      arranjo[i+1]=arranjo[i]
      i=i-1
    arranjo[i+1]=chave
  fim = time.time()
  tempo_exec=fim-ini
  return arranjo,tempo_exec

def merge(arranjo, l, r):
  i = 0
  j = 0
  #arranjo=[]      
        
  k = 0
  while i < len(l) and j < len(r):
    if l[i] <= r[j]:
      arranjo[k] = l[i]
      i += 1
    else:
      arranjo[k] = r[j]
      j += 1
    k += 1

  while i < len(l):
    arranjo[k] = l[i]
    i += 1
    k += 1

  while j < len(r):
    arranjo[k]=r[j]
    j += 1
    k += 1



def mergeSort(arranjo):
  if len(arranjo) > 1:
    meio = int(len(arranjo)//2)
    l = arranjo[:meio]
    r = arranjo[meio:]
    mergeSort(l)
    mergeSort(r)
    merge(arranjo, l , r)
  
  return arranjo

"""## Demais Funções

### Função para gerar arranjos aleatórios
"""

def gera_arranjos_aleatorio(n_elementos):
  A=np.random.randint(0, 100, (n_elementos))
  return A

"""### Função para calcular tempo"""

def tempo(algoritmo, arranjo):
  ini= time.time()
  aux=algoritmo(arranjo)
  fim = time.time()
  tempo_exec=fim-ini
  return tempo_exec

"""## Main"""

def gera_array_de_tempos(n_elementos,tipo_array):
  aux = [] 
  aux2 =[]
  for i in range(n_elementos):
    Array=tipo_array(i)
    aux.append(tempo(insertionSort,Array))
    aux2.append(insertionSort(Array)[1],)

  return aux, aux2

def gera_arranjos_pior_caso(n_elementos):
  B=[]
  B=np.arange(n_elementos)
  B=B[::-1]
  return B

n=200

plt.figure(figsize=(10,8))
temposAleatórios=gera_array_de_tempos(n,gera_arranjos_aleatorio)
temposmelhorcaso=gera_array_de_tempos(n,np.arange)
tempospiorcaso=gera_array_de_tempos(n,gera_arranjos_pior_caso)
plt.plot(temposAleatórios[0],'g',label="f(n)")
plt.plot(temposmelhorcaso[0],'b',label="c1g(n)<= f(n)")
plt.plot(tempospiorcaso[0],'r', label="f(n) <= c2g(n)")
plt.xlabel('n-entradas')
plt.ylabel('Tempo')
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
temposAleatórios=gera_array_de_tempos(n,gera_arranjos_aleatorio)
temposmelhorcaso=gera_array_de_tempos(n,np.arange)
tempospiorcaso=gera_array_de_tempos(n,gera_arranjos_pior_caso)
plt.plot(temposAleatórios[1],'g',label="f(n)")
plt.plot(temposmelhorcaso[1],'b',label="c1g(n)<= f(n)")
plt.plot(tempospiorcaso[1],'r', label="f(n) <= c2g(n)")
plt.xlabel('n-entradas')
plt.ylabel('Tempo')
plt.legend()
plt.show()

x=[]
x=gera_arranjos_aleatorio(10)
print(x)
y = mergeSort(x.tolist())
print(y)

myList = [54,26,93,17,77,31,44,55,20]
print(mergeSort(myList))

